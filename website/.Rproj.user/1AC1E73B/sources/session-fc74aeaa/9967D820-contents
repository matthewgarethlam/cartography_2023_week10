---
title: "Week 10 Map"
author: "Matthew Lam"
date: "2023-03-20"
output: html_document
---
 
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
 
## Load Data
```{r}
gdppercap <- read.csv("one-person-households-vs-gdp-per-capita.csv")
 
onepersonhouseholds <- read.csv("one-person-households.csv")
 
alcohollitrespercapita <- read.csv("total-alcohol-consumption-per-capita-litres-of-pure-alcohol.csv")
```
 
 
## Load Libs
```{r}
library(plotly)
library(tidyverse)
```
 
## Getting countries in Europe
```{r}
#scrape the wikipedia page to get list of european countries
library(rvest)
url <- "https://simple.wikipedia.org/wiki/List_of_European_countries"
webpage <- read_html(url)
countries_in_europe <- as.data.frame(html_nodes(webpage, "table") %>% html_table()) # this is now a df
 
#cleanup
colnames(countries_in_europe)[1] <- "country_name"
#select only relevant columns
countries_in_europe <- countries_in_europe %>% select(country_name)
#make into list
countries_in_europe_list <- c(countries_in_europe$country_name)
#fixing Georgia
countries_in_europe_list[17] <- "Georgia"
countries_in_europe
```
 
## Cleaning one person households
```{r}
onepersonhouseholds
 
#filter if Entity column is in the european countries list
onepersonhouseholds_europe <- onepersonhouseholds %>% filter(onepersonhouseholds$Entity%in% countries_in_europe_list==T)
 
#checking how many countries there are
unique(onepersonhouseholds_europe$Entity) #41
 
#checking how many years there are
length(unique(onepersonhouseholds_europe$Year)) #19 years availalbe.
```
 
##Cleaning gdp per cap
```{r}
gdppercap #wth is this mess?!
 
#first filter out for European countries list so we can actually work with this thing
gdppercap_europe <- gdppercap %>% filter(gdppercap$Entity %in% countries_in_europe_list==T)
 
#check how many countries and years are available
length(unique(gdppercap_europe$Entity)) #47??? - where did the extra 6 come from??
#how is it that we have a Year -1000?????
length(unique(gdppercap_europe$Year))
 
#filtering for years also
gdppercap_europe <- gdppercap_europe %>% filter(gdppercap_europe$Year %in% onepersonhouseholds_europe$Year==T)
 
#check year again
length(unique(gdppercap_europe$Year)) #now 19 yeras availalbe.
 
 
#now checking which countries we have added extra
gdppercap_europe_countries <-as.data.frame(unique(gdppercap_europe_countries$Entity))
colnames(gdppercap_europe_countries) <- "Entity"
 
#ifelse to check
gdppercap_europe_countries$in_other_dataset <- ifelse(
  gdppercap_europe_countries$Entity %in% onepersonhouseholds_europe$Entity==T, 1,0
)
 
gdppercap_europe_countries # it's the islands
 
#now filter out for everything that is in the other dataset
gdppercap_europe <- gdppercap_europe %>% filter(gdppercap_europe$Entity %in% onepersonhouseholds_europe$Entity==T)
 
#check agian
length(unique(gdppercap_europe$Entity)) #good - 41.
 
```
 
#cleaning alcohol per capita
```{r}
#inspect the dataset
library(imputeTS)
alcohollitrespercapita #LOL wtf is this mess
 
#a super seggsi way to clean the data - feeling like an academic weapon rn
alcohol_europe <- alcohollitrespercapita %>% filter(alcohollitrespercapita$Year %in% onepersonhouseholds_europe$Year==T & alcohollitrespercapita$Entity %in% onepersonhouseholds_europe$Entity)
 
#checking
length(unique(alcohol_europe$Year))

#write to csv to clean manually - no but i am better than this
write.csv(alcohol_europe, 'alcohol_europe_dirty.csv')


#### second try ####
#make blank dataset with all years
years_df <- as.data.frame(2000:2018)
colnames(years_df) <- "year"

#now repeat for 6 times - to get 64 years
for(i in 1:5.35){
  counter <- i
  if(counter<=5.35){
  years_df <- rbind(years_df, years_df)
  print(length(years_df[years_df$year==2000,]))
  counter <- i+1
  }
  
}
years_df
length(years_df[years_df$year==2000,])

length(unique(alcohol_europe$Entity))
 
#load packages for imputaiton
library(Amelia)
library(mice)

#first extract years and make all years without value NAs
for(i in unique(alcohol_europe$Entity)){ #first for loops countries
  for(j in min(onepersonhouseholds_europe$Year):max(onepersonhouseholds_europe$Year)) #second for loops year
  #print(alcohol_europe[alcohol_europe$Entity==i,])
    print(i)
    print(j)
}

#run the imputation function
ts_impute_vec(alcohol_europe$Total.alcohol.consumption.per.capita..liters.of.pure.alcohol..projected.estimates..15..years.of.age., period=1, lambda=NULL)
```
 
 COlors:R-230, G: 209, B: 178. 
 
 
## Data Cleaning Read in new file
```{r}
europe_clean_ish <- read.csv("alcohol_europe_dirty.csv")

europe_clean_ish <- europe_clean_ish %>% select(Entity, Code, Year, `Total.alcohol.consumption.per.capita..liters.of.pure.alcohol..projected.estimates..15..years.of.age.`)
colnames(europe_clean_ish) <- c("country", "country_code", "year", "alcohol_per_capita")


europe_clean_ish


#### now for imputation ####
ts_impute_vec(europe_clean_ish$alcohol_per_capita, period=1, lambda=NULL)
hist(europe_clean_ish$alcohol_per_capita)

europe_clean_ish$imputed_values <- ts_impute_vec(europe_clean_ish$alcohol_per_capita, period=1, lambda=NULL)
hist(europe_clean_ish$alcohol_per_capita)

```

 
## Then join in the rest
```{r}
library(tidyverse)
joined_df <- left_join(europe_clean_ish, onepersonhouseholds_europe, by=c("country"="Entity", "year"="Year")) %>% filter(year>=2005) %>% select(country,country_code, year, imputed_values, Share.of.one.person.households)
joined_df$Share.of.one.person.households <- ts_impute_vec(joined_df$Share.of.one.person.households, period=1, lambda=NULL)


#joning gdp 
joined_df2 <- left_join(joined_df, gdppercap_europe, by=c("country"="Entity", "year"="Year")) %>% select(country, country_code, year, imputed_values, Share.of.one.person.households.x, GDP.per.capita..PPP..constant.2017.international...)

colnames(joined_df2) <- c("country", "country_code", "year","imputed_values", "share_one_person_households", "gdp_per_cap")

write.csv(joined_df2, "joined_df2.csv")
joined_df2 <- read.csv("joined_df2.csv")
```

 
 
## Demo plot
```{r}
library(gapminder)
gapminder # frame variable is year
 
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, color=continent))+
  geom_point(aes(size=pop, frame=year, ids=country))+
  scale_x_log10()
 
p
 
ggplotly(p)
```
 
 
## Demo bubble chart - static using plotly
```{r}
library(plotly)
library(gapminder)
 
data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv")
 
data_2007 <- data[which(data$year == 2007),]
data_2007 <- data_2007[order(data_2007$continent, data_2007$country),]
slope <- 2.666051223553066e-05
data_2007$size <- sqrt(data_2007$pop * slope)
colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070', '#C61951')
 
fig <- plot_ly(gapminder, x = ~gdpPercap, y = ~lifeExp, color = ~continent, size = ~pop, colors = colors, frame=~year,
        type = 'scatter', mode = 'markers', sizes = c(min(data_2007$size), max(data_2007$size)),
        marker = list(symbol = 'circle', sizemode = 'diameter',
                      line = list(width = 2, color = 'rgb(220,220,220)')),
        text = ~paste('Country:', country, '<br>Life Expectancy:', lifeExp, '<br>GDP:', gdpPercap,
                      '<br>Pop.:', pop))
fig <- fig %>% layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
         xaxis = list(title = 'GDP per capita (2000 dollars)',
                      gridcolor = 'rgb(220,220,220)',
                      range = c(2.003297660701705, 5.191505530708712),
                      type = 'log',
                      zerolinewidth = 1,
                      ticklen = 5,
                      gridwidth = 2),
         yaxis = list(title = 'Life Expectancy (years)',
                      gridcolor = 'rgb(255, 255, 255)',
                      range = c(36.12621671352166, 91.72921793264332),
                      zerolinewidth = 1,
                      ticklen = 5,
                      gridwith = 2),
         paper_bgcolor = 'rgb(230, 209, 178)',
         plot_bgcolor = 'rgb(230, 209, 178)')

 
fig <- fig %>% layout(
 
    xaxis = list(
 
      type = "log"
 
    )
 
  )
 
 
fig

#saving
library(htmlwidgets)
saveWidget(fig, "demo_widget.html")
```





## Real plot
```{r}
length(unique(joined_df2$region))
colnames(joined_df2)
colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070')
 
fig <- plot_ly(joined_df2, x = ~imputed_values, y = ~share_one_person_households, color = ~region, size = ~gdp_per_cap, colors = colors, frame=~year,
        type = 'scatter', mode = 'markers',
        marker = list(symbol = 'circle', sizemode = 'diameter',
                      line = list(width = 2, color = 'rgb(220,220,220)')),
        text = ~paste('Country:', country, '<br>Share of One Person Households:',share_one_person_households, '<br>GDP Per Capita:', gdp_per_cap,
                      '<br>Litres of Alcohol Consumed per Person:', imputed_values))
fig <- fig %>% layout(title = 'Is Europe getting lonelier and drunker?\n',
         xaxis = list(title = 'Alcohol Consumed Per Person (Litres/Year)',
                      gridcolor = 'rgb(220,220,220)',
                      zerolinewidth = 1,
                      ticklen = 5,
                      gridwidth = 2),
         yaxis = list(title = 'Share of One Person Households (%)',
                      gridcolor = 'rgb(255, 255, 255)',
                      zerolinewidth = 1,
                      ticklen = 5,
                      gridwith = 2),
         paper_bgcolor = 'rgb(230, 209, 178)',
         plot_bgcolor = 'rgb(230, 209, 178)')

 
# fig <- fig %>% layout(
#  
#     xaxis = list(
#  
#       type = "log"
#  
#     )
#  
#   )
 
fig
saveWidget(fig, "draft_widget.html")
```

